@inject NavigationManager Navigation
@inject IBlazorImageService BlazorImageService
@inject IImageElementService ImageElementService
@inject IJSRuntime JSRuntime

@attribute [StreamRendering]

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="image-loading-container" style="position:relative;height:auto">
        <img src="@Src" class="@LoadingClass @CssClass" style="opacity:0.8; @Style" alt="@Alt" />
        <div class="loading-spinner" role="status" aria-live="polite">
            @if (!statusMessage.Contains("100"))
            {
                <div class="spinner-border" role="status" aria-hidden="true"></div>
                <span>@statusMessage</span>
            }
            else
            {
                <span>👍 Just Reload!</span>
            }
        </div>
    </div>
}
else
{
    <div class="@WrapperClass" style="@WrapperStyle">
        <div class="img-container" style="padding-top: @(AspectRatioPadding)%;">

            <img 
            srcset="@(LazyLoading ? _placeholder : Source)"
            data-srcset="@(LazyLoading ? Source : "")"
            sizes="@Sizes"
            src="@_FallbackImageSrc"
            alt="@Alt"
            title="@Title"
            width="@Width"
            height="@Height"
            class="@LoadingClass @CssClass"
            style="@Style"
            loading="@LazyLoadingAttr"
            @ref="_imageRef"
            @attributes="AdditionalAttributes" />

            @if (EnableDeveloperMode)
            {
                <CascadingValue IsFixed="true" Value="this">
                    <DeveloperInfoPanel />
                </CascadingValue>
            }
        </div>
    </div>


    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="error-message" role="alert">
            Failed to load image: @_error
        </div>
    }
}

@code {
    private string? _error;
    private string? statusMessage;
    private string? _FallbackImageSrc;
    private string? _placeholder; 
    private string? Source;
    private string? _mimeType;
    private double AspectRatioPadding;
    private ElementReference _imageRef;

    private string LazyLoadingAttr => LazyLoading ? "lazy" : "eager";
    private string LoadingClass => LazyLoading ? "_blazor_lazy_load blazorlazyload" : "";

    [Parameter] public int? Width { get; set; }
    [Parameter] public int? Height { get; set; }
    [Parameter] public bool? Fill { get; set; }

    [Parameter] public bool EnableInteractiveState { get; set; }
    [Parameter, EditorRequired] public required string Src { get; set; }
    [Parameter, EditorRequired] public required string Alt { get; set; }
    [Parameter] public bool LazyLoading { get; set; } = true;
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? CssClass { get; set; }
    [Parameter] public string? WrapperClass { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public string? WrapperStyle { get; set; }
    [Parameter] public int? Quality { get; set; }
    [Parameter] public FileFormat? Format { get; set; }
    [Parameter]
    public string? Sizes { get; set; } = "(min-width: 1024px) 1024px, 100vw";

    [Parameter] public bool EnableDeveloperMode { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (Fill == null && (Width == null || Height == null))
        {
            _error = "Either 'Fill' must be specified to `true` or both 'Width' and 'Height' must be provided.";
            return;
        }

        if (Fill == true && (Width != null || Height != null))  
        {  
            _error = "If 'Fill' is specified to `true`, both 'Width' and 'Height' must not be provided.";
            return;
        }
        await InitImageAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (RendererInfo.IsInteractive && EnableInteractiveState)
        {
            await InitImageAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender &&
            RendererInfo.IsInteractive &&
            LazyLoading &&
            _imageRef.Context != null)
        {
            await JSRuntime.InvokeVoidAsync("BlazorLazyLoad", _imageRef);
        }
    }

    private async Task InitImageAsync()
    {
        var result = await BlazorImageService.GetImageInfoAsync(Src, Quality, Format);

        if (result?.IsSuccess ?? false)
        {
            var imageInfo = result.Value;
            LoadImages(imageInfo);

            double height = Height ?? imageInfo.Height ?? 1;
            double width = Width ?? imageInfo.Width ?? 1;
            AspectRatioPadding = (height / width) * 100; 

 
            statusMessage = "";
            _error = "";
        }
        else if (result != null)
        {
            _error = result.Error;
        }
        else
        {
            await ProcessImageWithProgressUpdates();
        }
    }

    private async Task ProcessImageWithProgressUpdates()
    {
        var options = new BoundedChannelOptions(100)
            {
                FullMode = BoundedChannelFullMode.DropOldest
            };

        var channel = Channel.CreateBounded<string>(options);

        await BlazorImageService.ProcessAndGetImageInfoAsync(Src, Quality, Format, channel.Writer);

        await foreach (var message in channel.Reader.ReadAllAsync())
        {
            statusMessage = message;
            StateHasChanged();
        }
    }

    private void LoadImages(ImageInfo imageInfo)
    {
        if (imageInfo == null || !imageInfo.Quality.HasValue || !imageInfo.Format.HasValue)
        {
            _error = "Invalid image information";
            return;
        }

        var (source, fallback, placeholder) = ImageElementService.GetStaticPictureSourceWithMetadataInfo(
            imageInfo.SanitizedName,
            imageInfo.Quality.Value,
            imageInfo.Format.Value,
            Width);

        Source = source;
        _FallbackImageSrc = fallback;
        _mimeType = imageInfo.Format?.ToMimeType();
        _placeholder = EnableInteractiveState ? source : placeholder;
    }
}
@inject IOptions<BlazorImageConfig> Options
@inject IImageElementService ImageElementService
@inject IFileService FileService
<div class="developer-info-container">

    @if (RendererInfo.IsInteractive)
    {
        <button type="button"
                class="info-toggle"
                aria-label="Show Image Info Popup"
                aria-expanded="@_showDetails.ToString().ToLower()"
                @onclick="ToggleDetails">
            <span class="info-icon">ℹ️</span>
        </button>
        @if (_showDetails)
        {
            <div class="developer-info-popup-overlay show" @onclick="ClosePopup"></div>
            @PopupContent
        }
    }
    else
    {
        <button type="button"
                class="info-toggle"
                aria-label="Show Image Info Popup"
                aria-expanded="@_showDetails.ToString().ToLower()"
                onclick="toggleDeveloperInfo(this)">
            <span class="info-icon">ℹ️</span>
        </button>
        <div class="developer-info-popup-overlay" onclick="closeDeveloperInfo(this)"></div>
        @PopupContent
    }

</div>

@code {


    [CascadingParameter] public Image ImageComponent { get; set; } = default!;
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

    private bool _showDetails = false;

    private void ToggleDetails()
    {
        _showDetails = !_showDetails;
    }

    private void ClosePopup()
    {
        _showDetails = false;
    }

     private string GetImageProccessOutputDir(string fileName)
            {
                var path = FileService.GetRootPath(Path.Combine(Options.Value.Dir, fileName));
                return path;
            }

    private string FileSizeDisplay => FileService.GetFileSizeInKb(ImageComponent.Src) + " kb";
    private string QualityDisplay => ImageComponent.Quality?.ToString() ?? Options.Value.DefaultQuality.ToString();
    private string FormatDisplay => ImageComponent.Format?.ToMimeType() ?? Options.Value.DefaultFileFormat.ToMimeType();
    private string LoadingDisplay => ImageComponent.LazyLoading ? "lazy" : "eager";
    private string DecodingDisplay => ImageComponent.LazyLoading ? "async" : "auto";

    private RenderFragment PopupContent => (__builder) =>
    {
        <div class="@($"developer-info-popup {(RendererInfo.IsInteractive && _showDetails ? "show" : "")}")">
            <div class="popup-header">
                <h6 class="info-header">Image Optimization Details</h6>
                <button type="button" class="close-button" aria-label="Close Image Info" @onclick="ClosePopup">
                    <span aria-hidden="true">×</span> @* Close icon *@
                </button>
            </div>

            <ul class="developer-info-list">
                <li><strong>Render Mode:</strong> @RendererInfo.Name</li>
                <li><strong>Interactive Mode:</strong> @(ImageComponent.EnableInteractiveState ? RendererInfo.IsInteractive ? "Enabled" : "Enabled (not working on static)" : "Disabled")</li>
              
                <li class="info-separator"></li>
                <li><strong>Original Source:</strong> <span class="info-value">@ImageComponent.Src</span></li>
                <li><strong>Original Size:</strong> <span class="info-value">@FileSizeDisplay</span></li>
                <li><strong>Optimized Directory:</strong> <span class="info-value">@Options.Value.Dir</span></li>

                <li class="info-separator"></li>
                <li><strong>Quality:</strong> <span class="info-value">@QualityDisplay</span></li>
                <li><strong>Format:</strong> <span class="info-value">@FormatDisplay</span></li>
                <li><strong>Loading:</strong> <span class="info-value">@LoadingDisplay</span></li>
                <li><strong>Decoding:</strong> <span class="info-value">@DecodingDisplay</span></li>
                <li class="info-separator"></li>
                <li><strong>Alt Text:</strong> <span class="info-value">@ImageComponent.Alt</span></li>
                <li><strong>Title:</strong> <span class="info-value">@ImageComponent.Title</span></li>
                <li><strong>Caption:</strong> <span class="info-value">@ImageComponent.Caption</span></li>
                <li><strong>CSS Class:</strong> <span class="info-value">@ImageComponent.CssClass</span></li>
                <li><strong>Wrapper Class:</strong> <span class="info-value">@ImageComponent.WrapperClass</span></li>
                <li><strong>Width:</strong> <span class="info-value">@ImageComponent.Width</span></li>
                <li><strong>Height:</strong> <span class="info-value">@ImageComponent.Height</span></li>

                @if (ImageComponent.AdditionalAttributes != null && ImageComponent.AdditionalAttributes.Any())
                {
                    <li>
                        <strong>Additional Attributes:</strong>
                        <ul class="attributes-list">
                            @foreach (var attr in ImageComponent.AdditionalAttributes)
                            {
                                <li><span class="attribute-key">@attr.Key</span>: <span class="attribute-value">@attr.Value</span></li>
                            }
                        </ul>
                    </li>
                }
                <li class="info-separator"></li>

                @foreach (var width in Constants.ConfigSizes)
                {
           
                    var fileSrc = GetImageProccessOutputDir(ImageElementService.GenerateImageName(ImageComponent.Src, width, ImageComponent.Quality, ImageComponent.Format));
                    var oldSize = FileService.GetFileSizeInKb(ImageComponent.Src);
                    var newSize = FileService.GetFileSizeInKb(fileSrc ?? "");
                    var reduction = HelpersMethods.CalculateReductionPercentage(oldSize,
                    newSize);

                    <li class="image-size-info">
                        <div class="size-header">
                            <span class="size-label">Screens up to @width px</span>
                        </div>
                        <ul>
                            <li class="size-details">
                                <span class="size-url"><code>@($"{width}w")</code></span>
                                @if (oldSize <= newSize)
                                {
                                    <div>
                                        <span class="size-reduction-min">
                                            Optimized Size: <code>@(newSize.ToString() + "KB")</code> <strong>(@reduction% reduction)</strong>
                                        </span>

                                    </div>
                                }
                                else
                                {
                                    <span class="size-reduction">
                                        🔥 Optimized Size: <code>@(newSize.ToString() + "KB")</code> <strong>(@reduction% reduction)</strong>
                                    </span>
                                }
                            </li>
                        </ul>
                    </li>
                }
            </ul>
        </div>
    };
}
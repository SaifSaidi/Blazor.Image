!function (e, t) { "use strict"; const o = { lazyClass: "_blazor_lazy_load", loadedClass: "blazorlazyloaded", srcAttr: "data-src", srcsetAttr: "data-srcset", rootMargin: "200px 0px", threshold: .1 }, s = e => e.querySelector(".developer-info-popup-overlay"), r = e => e.querySelector(".developer-info-popup"), a = e => e.querySelector(".info-toggle"); e.toggleDeveloperInfo = function (e) { const t = e.closest(".developer-info-container"); if (!t) return; const o = s(t), a = r(t); if (o && a) { const t = o.classList.toggle("show"); a.classList.toggle("show"), e.setAttribute("aria-expanded", t) } }, e.closeDeveloperInfo = function (e) { const t = e.closest(".developer-info-container"); if (!t) return; const o = s(t), l = r(t), n = a(t); o && l && (o.classList.remove("show"), l.classList.remove("show"), n && n.setAttribute("aria-expanded", "false")) }; const l = new WeakMap; let n; const i = e => { if (l.has(e) || e.classList.contains(o.loadedClass)) return; l.set(e, !0); const { srcAttr: t, srcsetAttr: s, loadedClass: r } = o, a = e.getAttribute(t), n = e.getAttribute(s); if ("PICTURE" === e.parentNode.tagName) { const t = e.parentNode.querySelectorAll("source"); for (let e = 0; e < t.length; e++) { const o = t[e]; o.hasAttribute(s) && (o.srcset = o.getAttribute(s), o.removeAttribute(s)) } } a && (e.src = a), n && (e.srcset = n), e.onload = () => { e.classList.add(r), l.delete(e) }, e.onerror = () => { console.error("Failed to load image:", e.src), l.delete(e) }, e.removeAttribute(t), e.removeAttribute(s) }, c = () => (!n && "IntersectionObserver" in e && (n = new IntersectionObserver((e => { for (let t = 0; t < e.length; t++) { const { isIntersecting: o, target: s } = e[t]; o && (i(s), n.unobserve(s)) } }), { rootMargin: o.rootMargin, threshold: o.threshold })), n), d = () => { const e = t.querySelectorAll(`.${o.lazyClass}[loading="lazy"]:not([data-lazy-observed])`); if (!(e.length < 1)) { n || (n = c()); for (let t = 0; t < e.length; t++) { const s = e[t]; s.classList.contains(o.loadedClass) || (s.setAttribute("data-lazy-observed", "true"), n.observe(s)) } } }; e.BlazorLazyLoad = function (e) { e && e.classList.contains(o.lazyClass) && "lazy" === e.getAttribute("loading") && !e.dataset.lazyObserved && (n || (n = c()), e.setAttribute("data-lazy-observed", "true"), n.observe(e)) }, t.addEventListener("DOMContentLoaded", (() => { n = c(), d() }), { once: !0, passive: !0 }), e.Blazor && Blazor.addEventListener("enhancedload", d) }(window, document);
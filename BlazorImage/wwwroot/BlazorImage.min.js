!function (e, t) { "use strict"; const o = { lazyClass: "_placeholder_lazy_load", loadedClass: "blazorlazyloaded", srcAttr: "data-src", srcsetAttr: "data-srcset", observedAttr: "data-lazy-observed", rootMargin: "200px 0px", threshold: .1, devInfoContainerClass: ".developer-info-container", devInfoOverlayClass: ".developer-info-popup-overlay", devInfoPopupClass: ".developer-info-popup", devInfoButtonClass: ".info-toggle", devInfoShowClass: "show" }; function s(e) { const t = e.closest(o.devInfoContainerClass); return t ? { container: t, overlay: t.querySelector(o.devInfoOverlayClass), popup: t.querySelector(o.devInfoPopupClass), button: t.querySelector(o.devInfoButtonClass) } : null } e.toggleDeveloperInfo = function (e) { if (!e) return; const t = s(e); if (!t?.overlay || !t?.popup) return; const r = t.overlay.classList.toggle(o.devInfoShowClass); t.popup.classList.toggle(o.devInfoShowClass), e.setAttribute("aria-expanded", r.toString()) }, e.closeDeveloperInfo = function (e) { if (!e) return; const t = s(e); t?.overlay && t?.popup && (t.overlay.classList.remove(o.devInfoShowClass), t.popup.classList.remove(o.devInfoShowClass), t.button?.setAttribute("aria-expanded", "false")) }; const r = new WeakMap; let a = null; const n = e => { if (e.classList.contains(o.loadedClass) || r.has(e)) return; r.set(e, !0); const { srcAttr: t, srcsetAttr: s, loadedClass: a, observedAttr: n } = o, l = e.getAttribute(t), i = e.getAttribute(s), d = e.parentElement; "PICTURE" === d?.tagName && d.querySelectorAll(`source[${s}]`).forEach((e => { e.srcset = e.getAttribute(s), e.removeAttribute(s) })); const c = () => { e.classList.add(a), u() }, v = () => { e.classList.add("lazyload-error"), u() }, u = () => { r.delete(e), e.removeAttribute(t), e.removeAttribute(s), e.removeAttribute(n), e.removeEventListener("load", c), e.removeEventListener("error", v) }; e.addEventListener("load", c), e.addEventListener("error", v), l && (e.src = l), i && (e.srcset = i), e.complete && c() }, l = () => (a || !("IntersectionObserver" in e) || (a = new IntersectionObserver((e => { e.forEach((e => { if (e.isIntersecting) { const t = e.target; n(t), a.unobserve(t) } })) }), { rootMargin: o.rootMargin, threshold: o.threshold })), a); e.BlazorLazyLoad = function (e) { if (e instanceof Element) { if (e.classList.contains(o.lazyClass) && "lazy" === e.getAttribute("loading") && !e.hasAttribute(o.observedAttr) && !e.classList.contains(o.loadedClass)) { const t = l(); t ? (e.setAttribute(o.observedAttr, "true"), t.observe(e)) : (console.warn("Observer not available for BlazorLazyLoad, loading image directly.", e), n(e)) } } else console.warn("BlazorLazyLoad called with invalid element:", e) }; const i = () => ((e = t) => { const s = l(); if (!s) return void console.warn("IntersectionObserver not supported. Lazy loading via observer disabled."); const r = `img.${o.lazyClass}[loading="lazy"]:not([${o.observedAttr}])`, a = e.querySelectorAll(r); if (0 === a.length) return; const n = Array.from(a); for (const e of n) e.classList.contains(o.loadedClass) || (e.setAttribute(o.observedAttr, "true"), s.observe(e)) })(); "loading" === t.readyState && t.addEventListener("DOMContentLoaded", i, { once: !0, passive: !0 }), e.Blazor.addEventListener("enhancedload", (() => { i() })) }(window, document);